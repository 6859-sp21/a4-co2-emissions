{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Cloud.svelte",
    "../../SVGVisualBelow.svelte",
    "../../Legend.svelte",
    "../../SVGVisualOver.svelte",
    "../../CanvasVisual.svelte",
    "../../CountrySearch.svelte",
    "../../Continents.svelte",
    "../../YearLabels.svelte",
    "../../CentralLineChart.svelte",
    "../../CountryOverlay.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { csv } from 'd3-fetch';\n  import Cloud from './cloud/Cloud.svelte';\n\n  const years = [2002, 2006, 2010, 2014, 2018];\n\n  let data;\n\n  async function load() {\n    data = await csv('co2.csv', d => {\n      const dataArr = [];\n      const returnObj = {\n        iso: d.iso,\n        country: d.country,\n        reduction: +d.reduction,\n        continent: d.continent,\n        label: d.label\n      };\n      for (let key in d) {\n        if (key.match('^20')) dataArr.push({year: +key, value: +d[key]});\n      }\n      returnObj['dataArr'] = dataArr;\n      return returnObj;\n    });\n  }\n\n  load();\n</script>\n\n<div class=\"wrapper\">\n  <div class=\"header\">\n    <h1>CO<sub>2</sub> emissions around the world</h1>\n  </div>\n  <div id=\"visual\">\n    {#if data}\n      <Cloud {data} {years} />\n    {/if}\n  </div>\n  <div class=\"footer\">\n    Data from <a href=\"https://www.gapminder.org/data/\">GapMinder</a><br>\n    Library / code credit: <a href=\"https://github.com/vincentarelbundock/countrycode\">Vincent Arel-Bundock</a>, <a href=\"https://github.com/Rich-Harris\">Rich Harris</a>, <a href=\"https://github.com/higsch\">Matthias Stahl</a>, and <a href=\"https://github.com/mrdoob\">Mr.doob</a>\n  </div>\n</div>\n\n<style>\n  .wrapper {\n    /* width: 95%; */\n    height: 100%;\n    margin: 0;\n\n  }\n\n  .header {\n    width: 100%;\n    margin: 1.5rem 0;\n    color: var(--dark);\n  }\n\n  .header h1 {\n    font-family: 'Crimson Text', serif;\n    font-weight: 600;\n    font-size: calc(3rem + 7px);\n    text-align: center;\n  }\n\n  #visual {\n    position: relative;\n    width: 100%;\n  }\n\n  .footer {\n    text-align:center;\n    font-size:12px;\n    color: gray;\n    line-height:180%;\n    margin-top: -20px;\n  }\n</style>\n",
    "<script>\n  import { range, max, extent } from 'd3-array';\n  import { scaleLinear, scaleOrdinal } from 'd3-scale';\n\n  import CanvasVisual from './CanvasVisual.svelte';\n  import CircleVizBelow from './SVGVisualBelow.svelte';\n  import CircleVizAbove from './SVGVisualOver.svelte';\n  import CountrySearch from './CountrySearch.svelte';\n\n  import Legend from './Legend.svelte';\n\n  export let data;\n  export let years;\n\n  const offset = 10;\n  const angleOffset = 0;\n\n  let selectedIso;\n\n  // Dimensions\n  let rawWidth = offset;\n  let rawHeight = offset;\n\n  // Scales\n  let scYearColor, scCountryAngle, scYearRadius, scEmRate, scReduction;\n\n  function initScales(minDim) {\n    scYearColor = scaleOrdinal()\n      .domain(years)\n      .range(['#B4B8BB', '#A9AEB1', '#9FA4A8']);\n\n    scCountryAngle = scaleOrdinal()\n      .domain(data.map(d => d.iso))\n      .range(range(angleOffset, 2 * Math.PI - angleOffset, (2 * Math.PI - 2 * angleOffset) / data.length));\n\n    scYearRadius = scaleLinear()\n      .domain([years[0], years[years.length - 1]])\n      .range([minDim / 5, minDim / 2.4 - padding]);\n\n    scEmRate = scaleLinear()\n      .domain([0,1.7 * max([].concat(...data.map(d => d.dataArr.filter(d => years.includes(d.year)).map(d => d.value))))])\n      .range([0, minDim / 9]);\n\n    scReduction = scaleLinear()\n      .domain(extent(data.map(d => d.reduction)))\n      .range([Math.min(scYearRadius(years[years.length - 1]) + reductionOffset, minDim / 2 - padding), minDim/1.4]);\n  }\n\n  $: width = rawWidth - offset;\n  $: height = rawHeight - offset;\n  $: minDim = Math.min(width, height);\n  $: padding = minDim / 40;\n  $: reductionOffset = minDim / 40;\n\n  $: if (data && years) initScales(minDim);\n</script>\n\n<svelte:body on:click={() => selectedIso = undefined}/>\n<div class=\"fill\">\n  <div class=\"info\">\n    <div class=\"intro\">\n      <div class=\"text\">\n        Mouse over the visualization or search a country to see CO<sub>2</sub> emissions\n      </div>\n      {#if (width > 600)}\n        <div class=\"search\">\n          <CountrySearch data={data} on:isochanged={(e) => selectedIso = e.detail}/>\n        </div>\n      {/if}\n    </div>\n    <div class=\"legend\">\n      <Legend data={data} scEmRate={scEmRate} />\n    </div>\n    {#if (width <= 600)}\n      <div class=\"search small\">\n        <CountrySearch data={data} on:isochanged={(e) => selectedIso = e.detail}/>\n      </div>\n    {/if}\n  </div>\n  <div class=\"wrapper\" bind:offsetWidth={rawWidth} bind:offsetHeight={rawHeight}>\n    {#if (minDim > 0)}\n    <CircleVizBelow width={width}\n                    height={height}\n                    offset={offset}\n                    data={data}\n                    years={years}\n                    scCountryAngle={scCountryAngle}\n                    scYearRadius={scYearRadius}\n                    scReduction={scReduction} />\n    <CanvasVisual width={width}\n                height={height}\n                offset={offset}\n                data={data}\n                years={years}\n                scYearColor={scYearColor}\n                scCountryAngle={scCountryAngle}\n                scYearRadius={scYearRadius}\n                scEmRate={scEmRate}\n                selectedIso={selectedIso} />\n    <CircleVizAbove width={width}\n                  height={height}\n                  offset={offset}\n                  data={data}\n                  years={years}\n                  scCountryAngle={scCountryAngle}\n                  scYearRadius={scYearRadius}\n                  scReduction={scReduction}\n                  scEmRate={scEmRate}\n                  selectedIso={selectedIso}\n                  on:isochanged={(e) => selectedIso = e.detail} />\n    {/if}\n  </div>\n</div>\n\n<style>\n  .fill{\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex;\n    height: 80%;\n  }\n\n  .info {\n    padding-left: 15%;\n    padding-top: 5%;\n    height: 50%;\n    width: 20%;\n    color: var(--dark);\n  }\n\n  .legend {\n    height: 100%;\n  }\n\n  @media (max-width: 600px) {\n    .info > div {\n      width: 100%;\n      margin-bottom: 1.5rem;\n    }\n  }\n\n  .text {\n    text-align: justify;\n    line-height: 1.7;\n  }\n\n  .search {\n    flex-direction: column;\n    margin: 1rem 0 0 0;\n  }\n\n  .search.small {\n    align-items: center;\n  }\n\n  .wrapper {\n    -webkit-box-flex: 1;\n    -webkit-flex: 1;\n    -ms-flex: 1;\n    flex: 1;\n    height: 80vmin;\n  }\n</style>\n",
    "<script>\n  import Defs from './Defs.svelte';\n  import Continents from './Continents.svelte';\n  import ReductionPath from './ReductionPath.svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scReduction;\n\n  let continentsData;\n\n  function loadContinentsData() {\n    const uniqueContinents = [...new Set(data.map(d => d.continent))];\n    continentsData = uniqueContinents.map(continent => {\n      const raw = data.map(d => d.continent);\n      return {\n        startAngle: scCountryAngle(data[raw.indexOf(continent)].iso),\n        endAngle: scCountryAngle(data[raw.lastIndexOf(continent)].iso),\n        continent\n      };\n    });\n  }\n\n  // Prepare data for continent labels\n  $: if (data) loadContinentsData();\n</script>\n\n<svg class=\"svg-visual\"\n     width={width}\n     height={height}\n     style=\"margin: {offset / 2}px;\">\n  <Defs scReduction={scReduction} />\n  <ReductionPath width={width}\n                 height={height}\n                 data={data}\n                 scCountryAngle={scCountryAngle}\n                 scReduction={scReduction} />\n  <Continents width={width}\n              height={height}\n              data={continentsData}\n              years={years}\n              scYearRadius={scYearRadius} />\n</svg>\n\n<style>\n  svg {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n\n  import { extent } from 'd3-array';\n  import { scaleLinear } from 'd3-scale';\n  import { line as d3line, curveCardinal } from 'd3-shape';\n  import * as THREE from 'three';\n\timport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\timport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\n\t\tlet camera, scene, renderer;\n\n\t\tinit();\n\t\trender();\n\n\t\tfunction init() {\n\n\t\t\tconst container = document.getElementById( 'four' );\n\n\t\t\tconst backgroundColor = 0xfbfbfb;\n\t\t\tcamera = new THREE.PerspectiveCamera( 80, window.innerWidth / window.innerHeight, 1, 2000);\t\n\t\t\tcamera.position.set(12, 10, 7);\n\n\t\t\tscene = new THREE.Scene();\n\n\t\t\tconst loader = new GLTFLoader()\n\t\t\t\t\tloader.load( 'https://cdn.glitch.com/b914b490-bea8-4c55-b512-f1c164f636ef%2FEiffel_Tower.glb?v=1617693836928', function ( gltf ) {\n            gltf.scene.scale.set(2,2,2);\n            gltf.scene.position.y -= 5.5;\n\t\t\t\t\t\tscene.add( gltf.scene );\n\t\t\t\t\t\trender();\n\t\t\t\t\t} );\n      \n\t\t\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\t\trenderer.setSize( 400, 300 );\n      renderer.setClearColor(backgroundColor); \n\t\t\trenderer.outputEncoding = THREE.sRGBEncoding;\n\t\t\tcontainer.appendChild( renderer.domElement );\n\n\t\t\tconst controls = new OrbitControls( camera, renderer.domElement );\n\t\t\tcontrols.addEventListener( 'change', render );\n\t\t\tcontrols.target.set( 0, 0, - 0.2 );\n\t\t\tcontrols.update();\n\n\t\t\twindow.addEventListener( 'resize', onWindowResize );\n\n\t\t\tvar lightPoint = new THREE.PointLight(0xffffff, 0.5);\n\t\t\tlightPoint.position.set(0, 50, 40);\n\n\t\t\tscene.add(lightPoint);\n\n\t\t\tvar lightAmb = new THREE.AmbientLight(0xffffff);\n\n\t\t\tscene.add(lightAmb);\n\n\t\t\tconst light = new THREE.DirectionalLight(0xffffff, 0.8, 100);\n\t\t\tlight.position.set(0, 100, 40);\n\t\t\tlight.castShadow = true;\n\t\t\tscene.add(light);\n\n\t\t}\n\n\t\tfunction onWindowResize() {\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\trender();\n\n\t\t}\n\n\t\tfunction render() {\n\t\t\trenderer.render( scene, camera );\n\t\t}\n\t});\n\n  export let data;\n  export let scEmRate;\n\n  let width = 0;\n  let height = 0;\n  let emissionCircles = [];\n  let titleHeight = 0;\n\n  let scalesSet = false;\n  let xScale, yScale, reductionPath;\n\n  $: emissionCircles = [60, 30, 10].map((d, i, a) => {\n      return {\n        emissionRate: d,\n        r: scEmRate(d),\n        cx: scEmRate(a.slice(0, i + 1).reduce((a, c) => a + c)) + scEmRate(a.slice(0, Math.max(i, 1)).reduce((a, c) => a + c)) - (i === 0 ? scEmRate(d) : 0) + i * 20,\n        cy: height / 1.5\n      };\n    });\n\n  function setupScales(width, height) {\n    if (width === 0 || height === 0) return;\n\n    xScale = scaleLinear()\n      .domain([0, 10])\n      .range([emissionCircles[emissionCircles.length - 1].cx + width / 15, width - width / 20]);\n\n    yScale = scaleLinear()\n      .domain(extent(reductionData.map(d => d.reduction)))\n      .range([height * 2/3, height / 3]);\n\n    reductionPath = d3line()\n      .x((_, i) => xScale(i))\n      .y(d => yScale(d.reduction))\n      .curve(curveCardinal);\n  }\n\n  $: titleHeight = emissionCircles[0].cy - emissionCircles[0].r - 30;\n  $: reductionData = [...data.slice(55, 65), data[55]];\n  $: if (emissionCircles && reductionData) setupScales(width, height);\n  $: if (xScale && yScale && reductionPath) scalesSet = true;\n\n</script>\n\n<div class=\"container\" bind:offsetWidth={width} bind:offsetHeight={height}>\n  <svg width=\"100%\" height=\"100%\">\n    {#if scalesSet}\n      <g class=\"titles\" transform=\"translate(0 {titleHeight})\">\n        <text>Tonnes of CO2 per person</text>\n      </g>\n      <g class=\"emission-circles\" transform=\"translate(0 0)\">\n        {#each emissionCircles as d}\n          <circle class=\"emission-circle\"\n                  cx={d.cx}\n                  cy={d.cy}\n                  r={d.r}></circle>\n          <text class=\"emission-labels\" transform=\"translate({d.cx} {d.cy - d.r - 10})\">{d.emissionRate}</text>\n        {/each}\n      </g>\n    {/if}\n  </svg>\n</div>\n<div class='titles'>\n  <br>\n  How much is 1 kilo tonne (kT) of CO2?<br>\n  <em>Zoom out the Eiffel tower to find out!</em>\n  <div id=\"four\"></div>\n  \n</div>\n\n<style>\n  #four {\n    height:380px !important;\n    width: 300px !important;\n    overflow: hidden;\n    padding-top: 10px;\n  }\n\n  .container {\n    max-width: 800px;\n    margin-top: 12px;\n  }\n\n  text {\n    fill: var(--dark);\n  }\n\n  .titles {\n    font-size: 0.8rem;\n  }\n\n  circle.emission-circle {\n    fill: var(--gray);\n    stroke: none;\n    opacity: .7;\n  }\n\n  text.emission-labels {\n    font-size: 0.7rem;\n    text-anchor: middle;\n  }\n\n</style>\n",
    "<script>\n  import Defs from './Defs.svelte';\n  import YearLabels from './YearLabels.svelte';\n  import CenterChart from './CentralLineChart.svelte';\n  import CountryLabels from './CountryLabels.svelte';\n  import CountryOverlay from './CountryOverlay.svelte';\n  import IsoDetector from './IsoDetector.svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scReduction;\n  export let scEmRate;\n  export let selectedIso;\n\n  $: innerRadius = scYearRadius(years[0]) * 0.62;\n  $: countryRadius = scReduction.range()[1];\n</script>\n\n<svg class=\"svg-visual\"\n    width={width}\n    height={height}\n    style=\"margin: {offset / 2}px;\">\n  <Defs scReduction={scReduction} />\n  <YearLabels width={width}\n              height={height}\n              years={years}\n              scYearRadius={scYearRadius} />\n  <CenterChart width={width}\n                    height={height}\n                    data={data}\n                    selectedIso={selectedIso}\n                    radius={innerRadius} />\n  <CountryLabels width={width}\n                height={height}\n                data={data.map(d => ({iso: d.iso, country: d.country, reduction: d.reduction}))}\n                scCountryAngle={scCountryAngle}\n                radius={countryRadius}\n                selectedIso={selectedIso} />\n  <CountryOverlay width={width}\n                      height={height}\n                      data={data}\n                      years={years}\n                      scCountryAngle={scCountryAngle}\n                      scYearRadius={scYearRadius}\n                      scEmRate={scEmRate}\n                      scReduction={scReduction}\n                      selectedIso={selectedIso} />\n  <IsoDetector width={width}\n              height={height}\n              radius={scReduction.range()[1]}\n              scCountryAngle={scCountryAngle}\n              selectedIso={selectedIso}\n              on:isochanged />\n</svg>\n\n<style>\n  svg {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import { onMount } from 'svelte';\n\n  export let width;\n  export let height;\n  export let offset;\n  export let data;\n  export let years;\n  export let scYearColor;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scEmRate;\n  export let selectedIso;\n\n  const canvasScaleFactor = 2;\n\n  // Elements\n  let canvas, ctx;\n\n  function init() {\n    canvas.width = canvasScaleFactor * width;\n    canvas.height = canvasScaleFactor * height;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    canvas.style.margin = `${offset / 2}px`;\n\n    ctx.scale(canvasScaleFactor, canvasScaleFactor);\n    ctx.translate(width / 2, height / 2);\n\n    ctx.globalCompositeOperation = 'luminosity';\n  }\n\n  function draw(width, height, selectedIso) {\n    ctx.clearRect(-width / 2, -height / 2, width, height);\n    ctx.globalAlpha = selectedIso ? 0.1 : 0.4;\n\n    years.forEach(year => {\n      ctx.fillStyle = scYearColor(year);\n      data.forEach(d => {\n        const yearData = d.dataArr.find(d => d.year === year);\n        const x = Math.sin(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\n        const y = Math.cos(Math.PI - scCountryAngle(d.iso)) * scYearRadius(year);\n        ctx.beginPath();\n        ctx.arc(x, y, scEmRate(yearData.value), 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    });\n  }\n\n  onMount(() => {\n    ctx = canvas.getContext('2d');\n  });\n\n  $: if (ctx) init(width, height);\n  $: if (ctx && data) draw(width, height, selectedIso);\n</script>\n\n<canvas class=\"canvas-visual\"\n        bind:this={canvas}></canvas>\n\n<style>\n  canvas {\n    position: absolute;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  export let data = [];\n\n  const dispatch = createEventDispatcher();\n  \n  let searchString = '';\n\n  function handleSearch(searchString) {\n    const searchedObj = searchData.find(d => d.tobesearched.indexOf(searchString.toUpperCase()) >= 0);\n    if (searchString && searchedObj && searchedObj.iso) {\n      dispatch('isochanged', searchedObj.iso);\n    } else {\n      dispatch('isochanged', undefined);\n    }\n  }\n\n  $: searchData = data.map(d => ({iso: d.iso, tobesearched: `${d.iso}|${d.country}`.toUpperCase()}));\n\n  $: handleSearch(searchString);\n</script>\n\n<!-- <label for=\"country\">Search</label> -->\n<input id=\"country\"\n       name=\"country\"\n       autocomplete=\"off\"\n       type=\"search\"\n       placeholder=\"Search country\"\n       bind:value={searchString}\n       on:click|stopPropagation={() => handleSearch(searchString)} />\n\n<style>\n  ::placeholder{\n    color: #B4B8BB;\n  }\n\n  input {\n    width: 55%;\n    min-width: 200px;\n    padding: 0.4rem;\n    font-size: 1.1rem;\n    color: var(--dark);\n    border: solid;\n    border-radius: 0.5vmin;\n    -webkit-appearance: none;\n    font-family: \"Google Sans\", sans-serif;\n  }\n</style>\n",
    "<script>\n  import { arc as d3arc } from 'd3-shape';\n\n  export let width;\n  export let height;\n  export let data;\n  export let years;\n  export let scYearRadius;\n\n  const shrinkFactor = 0.62;\n  const lineThicknessFactor = 1.04;\n  const labelOffsetFactor = 1.1;\n\n  let arc, labelArc;\n\n  // The arcs\n  function defineArcs() {\n    const innerAreaRadius = scYearRadius(years[0]) * shrinkFactor;\n    arc = d3arc()\n      .startAngle(d => d.startAngle)\n      .endAngle(d => d.endAngle)\n      .innerRadius(innerAreaRadius)\n      .outerRadius(innerAreaRadius * lineThicknessFactor)\n      .cornerRadius(7);\n\n    labelArc = d3arc()\n      .startAngle(d => d.startAngle)\n      .endAngle(d => d.endAngle)\n      .innerRadius(innerAreaRadius * labelOffsetFactor)\n      .outerRadius(innerAreaRadius * labelOffsetFactor);\n  }\n\n  $: if (scYearRadius) defineArcs();\n</script>\n\n{#if data}\n  <g transform=\"translate({width / 2} {height / 2})\">\n    {#each data as d}\n      <path class=\"continent-arc\" d={arc(d)}></path>\n      <path class=\"continent-label-arc\" id=\"continent-label-arc-{d.continent}\" d={labelArc(d)}></path>\n      <text>\n        <textPath class=\"continent-label\" href=\"#continent-label-arc-{d.continent}\" startOffset=\"25%\">\n          {d.continent}\n        </textPath>\n      </text>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  path.continent-arc {\n    fill: var(--dark);\n  }\n  path.continent-label-arc {\n    fill: none;\n  }\n\n  textPath.continent-label {\n    fill: var(--dark);\n    text-anchor: middle;\n    font-family: Google Sans, sans-serif;\n    font-size: 0.7rem;\n  }\n</style>\n",
    "<script>\n  export let width;\n  export let height;\n  export let years;\n  export let scYearRadius;\n</script>\n\n<g transform=\"translate({width / 2} {height / 2})\">\n  {#each years as year}\n    <text transform=\"translate(0 {-scYearRadius(year) -32 + Math.min(width, height) / 22})\">{year}</text>\n  {/each}\n</g>\n\n<style>\n  text {\n    fill: var(--dark);\n    font-size: .6rem;\n    text-anchor: middle;\n  }\n</style>\n",
    "<script>\n  import { extent, max } from 'd3-array';\n  import { scaleLinear } from 'd3-scale';\n  import { line as d3line, curveCardinal } from 'd3-shape';\n\n  export let width;\n  export let height;\n  export let data;\n  export let selectedIso;\n  export let radius;\n\n  let dataArr, xScale, yScale, line, yLabels;\n\n  function updateScalesAndGenerators(radius) {\n    xScale = scaleLinear()\n      .domain(extent([].concat(...data.map(d => d.dataArr)).map(d => d.year)))\n      .range([-radius / 1.5, radius / 1.5]);\n\n    yScale = scaleLinear()\n      .domain([-10, max([].concat(...data.map(d => d.dataArr)).map(d => d.value))])\n      .range([radius / 2, -radius / 2]);\n      \n    line = d3line()\n      .x(d => xScale(d.year))\n      .y(d => yScale(d.value))\n      .curve(curveCardinal);\n\n    yLabels = [\n      {\n        x: xScale(dataArr[0].year) * 1.05,\n        y: yScale(dataArr[0].value) + Math.min(width, height) / 200,\n        text: Math.round(dataArr[0].value),\n        textAnchor: 'end'\n      },\n      {\n        x: xScale(dataArr[dataArr.length - 1].year) * 1.05,\n        y: yScale(dataArr[dataArr.length - 1].value) + Math.min(width, height) / 200,\n        text: Math.round(dataArr[dataArr.length - 1].value),\n        textAnchor: 'start'\n      }\n    ];\n  }\n\n  $: if (data && selectedIso) dataArr = data.find(d => d.iso === selectedIso).dataArr.filter(d => !isNaN(d.value));\n  $: if (data && dataArr) updateScalesAndGenerators(radius);\n</script>\n\n{#if (data && selectedIso)}\n  <g transform=\"translate({width / 2} {height / 2})\">\n    <text class=\"title\"\n          transform=\"translate(0 {yScale.range()[1]})\">Tonnes of CO2 per person</text>\n    <path d={line(dataArr)}\n          stroke=\"rgb(109, 109, 109)\"\n          stroke-width=\"2\"\n          fill=\"none\"></path>\n    {#each yLabels as yLabel}\n      <text class=\"y-label\"\n            transform=\"translate({yLabel.x} {yLabel.y})\"\n            text-anchor={yLabel.textAnchor}>{yLabel.text}</text>\n    {/each}\n    <line x1={xScale.range()[0]}\n          y1={yScale.range()[0]}\n          x2={xScale.range()[1]}\n          y2={yScale.range()[0]}></line>\n    {#each xScale.domain() as xLabel, i}\n      <text class=\"x-label\"\n            transform=\"translate({xScale(xLabel)} {yScale.range()[0] * 1.25})\"\n            text-anchor={i % 2 === 0 ? 'start' : 'end'}>{xLabel}</text>\n    {/each}\n  </g>\n{/if}\n\n<style>\n  text.title {\n    font-size: calc(0.4rem + 0.5vmin);\n    text-anchor: middle;\n    fill: rgb(109, 109, 109);\n  }\n\n  text.y-label {\n    font-size: 0.7rem;\n    fill: rgb(109, 109, 109);\n  }\n  \n  line {\n    stroke: rgb(109, 109, 109);\n    stroke-width: 1;\n  }\n\n  text.x-label {\n    font-size: 0.6rem;\n    fill: rgb(109, 109, 109);\n  }\n\n</style>\n",
    "<script>\n  import { select } from 'd3-selection';\n  import { transition } from 'd3-transition';\n\n  export let width;\n  export let height;\n  export let data;\n  export let years;\n  export let scCountryAngle;\n  export let scYearRadius;\n  export let scEmRate;\n  export let scReduction;\n  export let selectedIso;\n\n  let reduction;\n  let container;\n  let modelYears, modelReduction;\n\n  function update(selectedIso) {\n    if (!selectedIso) {\n      modelYears = [];\n      reduction = 0;\n      modelReduction = [];\n    } else {\n      reduction = data.find(d => d.iso === selectedIso).reduction;\n      modelReduction = [{\n        cx: Math.sin(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\n        cy: Math.cos(Math.PI - scCountryAngle(selectedIso)) * scReduction(reduction) * (reduction <= 0 ? 0.97 : 1.03),\n        r: Math.min(width, height) / 200\n      }];\n      modelYears = data.find(d => d.iso === selectedIso).dataArr.filter(d => years.includes(d.year)) || [];\n    }\n\n    // the three year overlay\n    select(container).selectAll('.year-circle')\n      .data(modelYears)\n      .join(enter => enter.append('circle')\n                      .attr('class', 'year-circle')\n                      .attr('fill', 'var(--red)')\n                      .attr('opacity', 0.6)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .call(enter => enter.transition().duration(100)\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('r', d => scEmRate(d.value))),\n            update => update.transition().duration(100)\n                        .attr('cx', d => Math.sin(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('cy', d => Math.cos(Math.PI - scCountryAngle(selectedIso)) * scYearRadius(d.year))\n                        .attr('r', d => scEmRate(d.value)),\n            exit => exit.transition().duration(100)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .remove()\n      );\n\n    // the reduction overlay\n    select(container).selectAll('.reduction-circle')\n      .data(modelReduction)\n      .join(enter => enter.append('circle')\n                      .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .call(enter => enter.transition().duration(100)\n                        .attr('cx', d => d.cx)\n                        .attr('cy', d => d.cy)\n                        .attr('r', d => d.r)),\n            update => update\n                        .attr('class', `reduction-circle ${reduction <= 0 ? 'decreased' : 'increased'}`)\n                        .transition().duration(100)\n                          .attr('cx', d => d.cx)\n                          .attr('cy', d => d.cy)\n                          .attr('r', d => d.r),\n            exit => exit.transition().duration(100)\n                      .attr('cx', 0)\n                      .attr('cy', 0)\n                      .attr('r', 0)\n                      .remove()\n      );\n  }\n\n  $: if (container) update(selectedIso);\n</script>\n\n<g transform=\"translate({width / 2} {height / 2})\" bind:this={container}></g>\n\n<style>\n  :global(circle.increased) {\n    opacity: .3;\n    fill: var(--red);\n  }\n\n  :global(circle.decreased) {\n    opacity: 1;\n    fill: var(--green);\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}